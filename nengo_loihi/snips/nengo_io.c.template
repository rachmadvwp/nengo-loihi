#include <stdlib.h>
#include <string.h>
#include "nengo_io.h"

#define N_OUTPUTS {{ n_outputs }}
#define N_ERRORS {{ n_errors }}
#define MAX_ERROR_LEN {{ max_error_len }}
#define SPIKE_SIZE 2

int guard_io(runState *s) {
    return 1;
}

void nengo_io(runState *s) {
{% for core in cores %}
    NeuronCore *core{{ core }} = NEURON_PTR((CoreId){ .id={{ core }} });
{% endfor %}
    CoreId coreId;
    int32_t axonType, axonId, atom;

    int inChannel = getChannelID("nengo_io_h2c");
    int outChannel = getChannelID("nengo_io_c2h");
    int32_t count[1];
    int32_t spike[SPIKE_SIZE];
    int32_t error_info[2];
    int32_t error_data[MAX_ERROR_LEN];
    int32_t error_index;
    int32_t output[N_OUTPUTS];

    if (inChannel == -1 || outChannel == -1) {
        printf("Got an invalid channel ID\n");
        return;
    }

    if (s->time % 100 == 0) {
        printf("time %d\n", s->time);
    }

    readChannel(inChannel, count, 1);
    // printf("count %d\n", count[0]);

    for (int i=0; i < count[0]; i++) {
        readChannel(inChannel, spike, SPIKE_SIZE);
        // printf("send spike %d.%d\n", spike[0], spike[1]);
        coreId = (CoreId) { .id=(spike[0] >> 16) };
        axonId = spike[0] & 0x0000FFFF;
        axonType = spike[1] >> 16;
        atom = spike[1] & 0x0000FFFF;
        // printf("send spike core=%d, axon=%d, type=%d atom=%d\n",
        //        coreId.id, axonId, axonType, atom);
        if (axonType == 0) {
            nx_send_discrete_spike(s->time, coreId, axonId);
        } else if (axonType == 32) {
            nx_send_pop32_spike(s->time, coreId, axonId, atom, 0, 0, 0);
        } else {
            printf("Got invalid axonType: %d\n", axonType);
            return;
        }
    }

    // Communicate with learning snip
    s->userData[0] = N_ERRORS;
    error_index = 1;
    for (int i=0; i < N_ERRORS; i++) {
        readChannel(inChannel, error_info, 2);
        readChannel(inChannel, error_data, error_info[1]);
        s->userData[error_index] = error_info[0];
        s->userData[error_index + 1] = error_info[1];
        for (int j=0; j < error_info[1]; j++) {
            s->userData[error_index + 2 + j] = error_data[j];
        }
        error_index += 2 + error_info[1];
    }

    output[0] = s->time;
{% for n_out, core, cx, key in probes %}
{% if key == 'u' %}
    output[{{ n_out }}] = core{{ core }}->cx_state[{{ cx }}].U;
{% elif key in ('v', 'spike') %}
    output[{{ n_out }}] = core{{ core }}->cx_state[{{ cx }}].V;
{% endif %}
{% endfor %}

    writeChannel(outChannel, output, N_OUTPUTS);
}
